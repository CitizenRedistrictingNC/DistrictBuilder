{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation Template for single-instance PublicMapping DistrictBuilder",
    "Parameters": {
        "KeyName": {
            "Description": "The EC2 Key Pair to allow SSH access to the instance",
            "Type": "String"
        },
        "AdminUser": {
            "Description": "The username of the system administrator of this DistrictBuilder installation",
            "Type": "String"
        },
        "AdminEmail": {
            "Description": "The email of the system administrator of this DistrictBuilder installation",
            "Type": "String"
        },
        "AdminPassword": {
            "Description": "The password of the system administrator of this DistrictBuilder installation",
            "Type": "String",
            "NoEcho": "TRUE"
        },
        "RepoBranch": {
            "Description": "The name of the repository branch to deploy for testing",
            "Type": "String"
        },
        "AWSAccessKey": {
            "Description": "Your AWS access key",
            "Type": "String",
            "NoEcho": "TRUE"
        },
        "AWSSecretKey": {
            "Description": "Your AWS secret key",
            "Type": "String",
            "NoEcho": "TRUE"
        }        
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "64": "ami-7539b41c"
            },
            "us-west-1": {
                "64": "ami-26745463"
            }
        }
    },
    "Resources": {
        "SetupInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceType": "m1.xlarge",
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ex\n",
                                "LOG=/var/log/instance.log\n",
                                "START=$(date +%s)\n",
                                "PMPHOME=/projects/PublicMapping\n",
                                "AWS_ACCESS_KEY=", { "Ref": "AWSAccessKey" }, "\n",
                                "AWS_SECRET_KEY=", { "Ref": "AWSSecretKey" }, "\n",
                                "echo -e '33,36c33,36\n< # deb http://us-west-1.ec2.archive.ubuntu.com/ubuntu/ quantal multiverse\n< # deb-src http://us-west-1.ec2.archive.ubuntu.com/ubuntu/ quantal multiverse\n< # deb http://us-west-1.ec2.archive.ubuntu.com/ubuntu/ quantal-updates multiverse\n< # deb-src http://us-west-1.ec2.archive.ubuntu.com/ubuntu/ quantal-updates multiverse\n---\n> deb http://us-west-1.ec2.archive.ubuntu.com/ubuntu/ quantal multiverse\n> deb-src http://us-west-1.ec2.archive.ubuntu.com/ubuntu/ quantal multiverse\n> deb http://us-west-1.ec2.archive.ubuntu.com/ubuntu/ quantal-updates multiverse\n> deb-src http://us-west-1.ec2.archive.ubuntu.com/ubuntu/ quantal-updates multiverse\n59,60c59,60\n< # deb http://security.ubuntu.com/ubuntu quantal-security multiverse\n< # deb-src http://security.ubuntu.com/ubuntu quantal-security multiverse\n---\n> deb http://security.ubuntu.com/ubuntu quantal-security multiverse\n> deb-src http://security.ubuntu.com/ubuntu quantal-security multiverse' | patch /etc/apt/sources.list", " &>> $LOG\n",

                                "apt-get update", " &>> $LOG\n",
                                "apt-get -y install apache2 libapache2-mod-wsgi python-dev python-django python-lxml python-gdal python-rpy2 python-scipy python-psycopg2 python-setuptools postgresql-9.1-postgis tomcat6 tomcat6-admin gettext git gfortran python-dev g++ pgtune ec2-api-tools", " &>> $LOG\n",
                                "easy_install pip", " &>> $LOG\n",
                                
                                
                                "SignalURL=\"", { "Ref": "AptWaitHandle" }, "\"\n",
                                "t0=$(expr $(date +%s) - $START)\n",
                                "t1=$(expr $(date +%s) - $START)\n",
                                "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\":\"SUCCESS\",\"Reason\":\"APT packages installed.\",\"UniqueId\":\"AptWait\",\"Data\":\"This step: '$t0'; cumulative: '$t1'\"}' $SignalURL", " &>> $LOG\n",
                                "STEP=$(date +%s)\n",


                                "mkdir -p $PMPHOME", " &>> $LOG\n",
                                "cd $PMPHOME", " &>> $LOG\n",
                                "git clone git://github.com/PublicMapping/DistrictBuilder.git", " &>> $LOG\n",                                
                                "cd DistrictBuilder", " &>> $LOG\n",
                                "git checkout ", { "Ref": "RepoBranch" }, " &>> $LOG\n",
                                "rev=$(git reflog | head -n 1 | cut -d ' ' -f 1)", " &>> $LOG\n",
                                "pip install -r requirements.txt", " &>> $LOG\n",
                                
                                
                                "SignalURL=\"", { "Ref": "PipWaitHandle" }, "\"\n",
                                "t0=$(expr $(date +%s) - $STEP)\n",
                                "t1=$(expr $(date +%s) - $START)\n",
                                "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\":\"SUCCESS\",\"Reason\":\"PIP packages installed.\",\"UniqueId\":\"PipWait\",\"Data\":\"This step: '$t0'; cumulative: '$t1'\"}' $SignalURL", " &>> $LOG\n",
                                "STEP=$(date +%s)\n",


                                "mkdir -p $PMPHOME/local/reports", " &>> $LOG\n",
                                "chown www-data:www-data $PMPHOME/local/reports", " &>> $LOG\n",
                                "for f in django/publicmapping/locale/*; do chown www-data:www-data $f/LC_MESSAGES/*o; done", " &>> $LOG\n",
                                "su postgres -c \"createdb -E UTF8 -T template0 -l en_US.UTF-8 template_postgis\"", " &>> $LOG\n",
                                "su postgres -c \"psql -f /usr/share/postgresql/9.1/contrib/postgis-1.5/postgis.sql template_postgis\"", " &>> $LOG\n",
                                "su postgres -c \"psql -f /usr/share/postgresql/9.1/contrib/postgis-1.5/spatial_ref_sys.sql template_postgis\"", " &>> $LOG\n",
                                "echo -e '89a90\n> local   all             all                                     md5' | patch /etc/postgresql/9.1/main/pg_hba.conf", " &>> $LOG\n",
                                "cp /etc/postgresql/9.1/main/postgresql.conf /etc/postgresql/9.1/main/postgresql.conf.orig", " &>> $LOG\n",
                                "pgtune -i /etc/postgresql/9.1/main/postgresql.conf.orig -T OLTP -o /etc/postgresql/9.1/main/postgresql.conf", " &>> $LOG\n",
                                "echo -e '7c7\n< #kernel.shmmax = 33554432\n---\n> kernel.shmmax = 3867107328' | patch /etc/sysctl.d/30-postgresql-shm.conf", " &>> $LOG\n",
                                "sysctl -p /etc/sysctl.d/30-postgresql-shm.conf", " &>> $LOG\n",

                                "service postgresql restart", " &>> $LOG\n",
                                "cd $PMPHOME/DistrictBuilder/sql", " &>> $LOG\n",
                                "su postgres -c \"psql -f publicmapping_db.sql\"", " &>> $LOG\n",

                                "cd /var/lib/tomcat6/webapps", " &>> $LOG\n",
                                "wget -q -O geoserver-2.2.5-war.zip 'http://downloads.sourceforge.net/project/geoserver/GeoServer/2.2.5/geoserver-2.2.5-war.zip?r=http%3A%2F%2Fgeoserver.org%2Fdisplay%2FGEOS%2FStable&ts=1362581444&use_mirror=hivelocity'", " &>> $LOG\n",
                                "unzip geoserver-2.2.5-war.zip", " &>> $LOG\n",

                                "mkdir $PMPHOME/data", " &>> $LOG\n",
                                "cd $PMPHOME/data", " &>> $LOG\n",
                                "wget -q --no-check-certificate -O VA_data.zip https://s3.amazonaws.com/districtbuilderdata/VA_data.zip", " &>> $LOG\n",
                                "mkdir -p $PMPHOME/local/data", " &>> $LOG\n",
                                "cd $PMPHOME/local/data", " &>> $LOG\n",
                                "unzip $PMPHOME/data/VA_data.zip", " &>> $LOG\n",
                                "while [ ! -x /var/lib/tomcat6/webapps/geoserver ]; do echo 'restarting tomcat to get geoserver app to auto-deploy...'; service tomcat6 restart; sleep 10; done\n",
                                "service tomcat6 stop", " &>> $LOG\n",
                                "cd /var/lib/tomcat6/webapps/geoserver/WEB-INF", " &>> $LOG\n",
                                "echo -e '5a6,10\n>    <context-param>\n>      <param-name>GEOWEBCACHE_CACHE_DIR</param-name>\n>      <param-value>/var/lib/tomcat6/webapps/geoserver/data/gwc</param-value>\n>    </context-param>\n>  \n' | patch web.xml", " &>> $LOG\n",
                                "mkdir -p /var/lib/tomcat6/webapps/geoserver/data/gwc", " &>> $LOG\n",
                                "cp $PMPHOME/DistrictBuilder/docs/geowebcache.xml /var/lib/tomcat6/webapps/geoserver/data/gwc/", " &>> $LOG\n",
                                "chown tomcat6:tomcat6 -R /var/lib/tomcat6/webapps/geoserver/data/gwc", " &>> $LOG\n",
                                "service tomcat6 start", " &>> $LOG\n",
                                
                                "SignalURL=\"", { "Ref": "DataWaitHandle" }, "\"\n",
                                "t0=$(expr $(date +%s) - $STEP)\n",
                                "t1=$(expr $(date +%s) - $START)\n",
                                "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\":\"SUCCESS\",\"Reason\":\"DB cluster, map server initialized and copied sample data.\",\"UniqueId\":\"DataWait\",\"Data\":\"This step: '$t0'; cumulative: '$t1'\"}' $SignalURL", " &>> $LOG\n",
                                "STEP=$(date +%s)\n",


                                "cd $PMPHOME/DistrictBuilder/docs/", " &>> $LOG\n",
                                "cp config.dist.xml config.xml", " &>> $LOG\n",
                                "echo -e '1191c1191\n<         <Database name=\"YOUR-DATABASE-NAME\" user=\"publicmapping\" password=\"YOUR-DATABASE-PASSWORD\" host=\"OPTIONAL\"/>\n---\n>         <Database name=\"publicmapping\" user=\"publicmapping\" password=\"publicmapping\" host=\"localhost\"/>\n1214c1214\n<         <Admin user=\"ADMIN-USER-NAME\" email=\"ADMIN-EMAIL\" password=\"STRONG-PASSWORD\"/>\n---\n>         <Admin user=\"", { "Ref": "AdminUser" }, "\" email=\"", { "Ref": "AdminEmail" }, "\" password=\"", { "Ref": "AdminPassword" }, "\"/>\n1240c1240\n<                 adminuser=\"GEOSERVER-ADMIN-USER\" adminpass=\"GEOSERVER-ADMIN-PASS\" maxfeatures=\"100\" \n---\n>                 adminuser=\"admin\" adminpass=\"geoserver\" maxfeatures=\"100\" ' | patch config.xml", " &>> $LOG\n",
                                "cd $PMPHOME/DistrictBuilder/django/publicmapping", " &>> $LOG\n",
                                "./setup.py ../../docs/config.xsd ../../docs/config.xml -v2 -d", " &>> $LOG\n",
                                "SignalURL=\"", { "Ref": "CfgWaitHandle" }, "\"\n",
                                "t0=$(expr $(date +%s) - $STEP)\n",
                                "t1=$(expr $(date +%s) - $START)\n",
                                "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\":\"SUCCESS\",\"Reason\":\"Configuration loaded.\",\"UniqueId\":\"CfgWait\",\"Data\":\"This step: '$t0'; cumulative: '$t1'\"}' $SignalURL", " &>> $LOG\n",
                                "STEP=$(date +%s)\n",
                                

                                "WORKERS=$(expr $(grep -c ^processor /proc/cpuinfo) \\* 2)\n",
                                "wget -q --no-check-certificate -O /etc/init.d/celeryd https://raw.github.com/ask/celery/master/contrib/generic-init.d/celeryd", " &>> $LOG\n",
                                "chmod a+x /etc/init.d/celeryd", " &>> $LOG\n",
                                "update-rc.d celeryd defaults", " &>> $LOG\n",
                                "cp $PMPHOME/DistrictBuilder/docs/celeryd /etc/default", " &>> $LOG\n",
                                "echo -e \"7c7\n< CELERYD_OPTS='-B -s /tmp/celerybeat-schedule'\n---\n> CELERYD_OPTS='-B -s /tmp/celerybeat-schedule --concurrency=$WORKERS'\" | patch /etc/default/celeryd", " &>> $LOG\n",
                                "mkdir /var/log/celery /var/run/celery", " &>> $LOG\n",
                                "chown www-data:www-data /var/log/celery /var/run/celery/", " &>> $LOG\n",
                                "service celeryd start", " &>> $LOG\n",


                                "./setup.py ../../docs/config.xsd ../../docs/config.xml -v2 -g0", " &>> $LOG\n",
                                "SignalURL=\"", { "Ref": "ImportG0WaitHandle" }, "\"\n",
                                "t0=$(expr $(date +%s) - $STEP)\n",
                                "t1=$(expr $(date +%s) - $START)\n",
                                "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\":\"SUCCESS\",\"Reason\":\"Import g0 complete.\",\"UniqueId\":\"ImportG0Wait\",\"Data\":\"This step: '$t0'; cumulative: '$t1'\"}' $SignalURL", " &>> $LOG\n",
                                "STEP=$(date +%s)\n",
                                
                                "./setup.py ../../docs/config.xsd ../../docs/config.xml -v2 -g1 -n1", " &>> $LOG\n",
                                "SignalURL=\"", { "Ref": "ImportG1WaitHandle" }, "\"\n",
                                "t0=$(expr $(date +%s) - $STEP)\n",
                                "t1=$(expr $(date +%s) - $START)\n",
                                "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\":\"SUCCESS\",\"Reason\":\"Import & renest g1 complete.\",\"UniqueId\":\"ImportG1Wait\",\"Data\":\"This step: '$t0'; cumulative: '$t1'\"}' $SignalURL", " &>> $LOG\n",
                                "STEP=$(date +%s)\n",
                                
                                "./setup.py ../../docs/config.xsd ../../docs/config.xml -v2 -g2 -n2", " &>> $LOG\n",
                                "SignalURL=\"", { "Ref": "ImportG2WaitHandle" }, "\"\n",
                                "t0=$(expr $(date +%s) - $STEP)\n",
                                "t1=$(expr $(date +%s) - $START)\n",
                                "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\":\"SUCCESS\",\"Reason\":\"Import & renest g2 complete.\",\"UniqueId\":\"ImportG2Wait\",\"Data\":\"This step: '$t0'; cumulative: '$t1'\"}' $SignalURL", " &>> $LOG\n",
                                "STEP=$(date +%s)\n",
                                
                                "./setup.py ../../docs/config.xsd ../../docs/config.xml -v2 -V -G", " &>> $LOG\n",
                                "SignalURL=\"", { "Ref": "GeoWaitHandle" }, "\"\n",
                                "t0=$(expr $(date +%s) - $STEP)\n",
                                "t1=$(expr $(date +%s) - $START)\n",
                                "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\":\"SUCCESS\",\"Reason\":\"Geo views & mapserver configuration complete.\",\"UniqueId\":\"GeoWait\",\"Data\":\"This step: '$t0'; cumulative: '$t1'\"}' $SignalURL", " &>> $LOG\n",
                                "STEP=$(date +%s)\n",
                                
                                "./setup.py ../../docs/config.xsd ../../docs/config.xml -v2 -t -s", " &>> $LOG\n",
                                "SignalURL=\"", { "Ref": "TplWaitHandle" }, "\"\n",
                                "t0=$(expr $(date +%s) - $STEP)\n",
                                "t1=$(expr $(date +%s) - $START)\n",
                                "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\":\"SUCCESS\",\"Reason\":\"Templates and static files configuration complete.\",\"UniqueId\":\"TplWait\",\"Data\":\"This step: '$t0'; cumulative: '$t1'\"}' $SignalURL", " &>> $LOG\n",
                                "STEP=$(date +%s)\n",
                                
                                "cp $PMPHOME/DistrictBuilder/django/publicmapping.apache /etc/apache2/sites-available/publicmapping", " &>> $LOG\n",
                                "a2ensite publicmapping", " &>> $LOG\n",
                                "a2dissite default", " &>> $LOG\n",
                                "a2enmod proxy proxy_http rewrite wsgi ssl", " &>> $LOG\n",
                                "chgrp -R www-data $PMPHOME/", " &>> $LOG\n",
                                "chmod -R 750 $PMPHOME/", " &>> $LOG\n",
                                "chmod 770 $PMPHOME/local/reports", " &>> $LOG\n",
                                "service apache2 restart", " &>> $LOG\n",
                                
                                "SignalURL=\"", { "Ref": "AppWaitHandle" }, "\"\n",
                                "t0=$(expr $(date +%s) - $STEP)\n",
                                "t1=$(expr $(date +%s) - $START)\n",
                                "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\":\"SUCCESS\",\"Reason\":\"Initialization complete.\",\"UniqueId\":\"AppWait\",\"Data\":\"This step: '$t0'; cumulative: '$t1'\"}' $SignalURL", " &>> $LOG\n",
                                
                                "id=$(ec2metadata | grep ^instance-id | cut -d ' ' -f 2)\n",
                                "AMI=$(ec2-create-image $id --region ", { "Ref" : "AWS::Region" }, " -n db-test-$rev -O $AWS_ACCESS_KEY -W $AWS_SECRET_KEY --no-reboot)", " &>> $LOG\n",
                                "AMI=$(echo $AMI | cut -d ' ' -f 2)", " &>> $LOG\n",
                                
                                "echo 'created AMI:'$AMI' from instance ID:'$id", " &>> $LOG\n",
                                "SignalURL=\"", { "Ref": "AmiWaitHandle" }, "\"\n",
                                "t0=$(expr $(date +%s) - $STEP)\n",
                                "t1=$(expr $(date +%s) - $START)\n",
                                "DATA='{\"Status\":\"SUCCESS\",\"Reason\":\"AMI image created.\",\"UniqueId\":\"AmiWait\",\"Data\":\"'$AMI'\"}'", "\n",
                                "echo \"Submitting data: $DATA\"", " &>> $LOG\n",
                                "curl -X PUT -H 'Content-Type:' --data-binary \"$DATA\" $SignalURL", " &>> $LOG\n"
                            ]
                        ]
                    }
                },
                "SecurityGroups": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ]
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable Access to web application via port 80, SSH access via port 22, map server via port 8080",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "AptWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "PipWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "DataWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "CfgWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "ImportG0WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "ImportG1WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "ImportG2WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "GeoWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "TplWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "AppWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "AmiWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "AptCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SetupInstance",
            "Properties": {
                "Handle": { "Ref": "AptWaitHandle" },
                "Timeout": "2400"
            }
        },
        "PipCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "AptCondition",
            "Properties": {
                "Handle": { "Ref": "PipWaitHandle" },
                "Timeout": "2400"
            }
        },
        "DataCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "PipCondition",
            "Properties": {
                "Handle": { "Ref": "DataWaitHandle" },
                "Timeout": "600"
            }
        },
        "CfgCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "DataCondition",
            "Properties": {
                "Handle": { "Ref": "CfgWaitHandle" },
                "Timeout": "600"
            }
        },
        "ImportG0Condition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "CfgCondition",
            "Properties": {
                "Handle": { "Ref": "ImportG0WaitHandle" },
                "Timeout": "2400"
            }
        },
        "ImportG1Condition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "ImportG0Condition",
            "Properties": {
                "Handle": { "Ref": "ImportG1WaitHandle" },
                "Timeout": "43200"
            }
        },
        "ImportG2Condition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "ImportG1Condition",
            "Properties": {
                "Handle": { "Ref": "ImportG2WaitHandle" },
                "Timeout": "43200"
            }
        },
        "GeoCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "ImportG2Condition",
            "Properties": {
                "Handle": { "Ref": "GeoWaitHandle" },
                "Timeout": "2400"
            }
        },
        "TplCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "GeoCondition",
            "Properties": {
                "Handle": { "Ref": "TplWaitHandle" },
                "Timeout": "2400"
            }
        },
        "AppCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "TplCondition",
            "Properties": {
                "Handle": { "Ref": "AppWaitHandle" },
                "Timeout": "30"
            }
        },
        "AmiCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "AppCondition",
            "Properties": {
                "Handle": { "Ref": "AmiWaitHandle" },
                "Timeout": "60"
            }
        }
    },
    "Outputs": {
        "PublicIP": {
            "Description": "The public IP of the instance.",
            "Value": {
                "Fn::GetAtt": [
                    "SetupInstance",
                    "PublicIp"
                ]
            }
        },
        "TestingAMI": {
            "Description": "The AMI of the test system.",
            "Value": {
                "Fn::GetAtt": [
                    "AmiCondition",
                    "Data"
                ]
            }
        },
        "AptTime": {
            "Value": { "Fn::GetAtt": [ "AptCondition", "Data" ]},
            "Description": "The time required to install APT sources."
        },
        "PipTime": {
            "Value": { "Fn::GetAtt": [ "PipCondition", "Data" ]},
            "Description": "The time required to install PIP sources."
        },
        "DataTime": {
            "Value": { "Fn::GetAtt": [ "DataCondition", "Data" ]},
            "Description": "The time required to install Example Data, setup the database, setup the map server."
        },
        "CfgTime": {
            "Value": { "Fn::GetAtt": [ "CfgCondition", "Data" ]},
            "Description": "The time required to configure the application database."
        },
        "GeoTime": {
            "Value": { "Fn::GetAtt": [ "GeoCondition", "Data" ]},
            "Description": "The time required to configure spatial views and Geoserver."
        },
        "TplTime": {
            "Value": { "Fn::GetAtt": [ "TplCondition", "Data" ]},
            "Description": "The time required to load the default templates."
        },
        "AppTime": {
            "Value": { "Fn::GetAtt": [ "AppCondition", "Data" ]},
            "Description": "The time required to setup the application completely."
        }
    }

}
