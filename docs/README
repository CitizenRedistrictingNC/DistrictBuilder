The Public Mapping Project
http://sourceforge.net/projects/publicmapping/

== Prerequisites ==

This software requires a few other pieces of free software to run.  Before 
you can run the public mapping web site, you'll need to install and 
configure:

Apache v 2.2
Geoserver v 2.0.2
Postgresql v 8.4 w/ PostGIS
Python v 2.6
Django v 1.1

On a debian-based system with aptitude installed, you can install most of 
the necessary software using the command:

> sudo aptitude install apache2 libapache2-mod-wsgi python-django \
    python-gdal python-rpy2 python-psycopg2 postgresql-8.4-postgis \
    sun-java6-jdk tomcat6 tomcat6-admin r-base-dev build-essential \
    
In order to allow recovery of passwords, a mail server is recommended. By default 
the application will use a locally running mailserver. 

It is also recommended to keep your system up to date with security patches. One way to
enable automatic updates with debian-based systems.

Running inst_extra.sh will install and configure mail and automatic update support. 

== Installation ==

 1. Check out the public mapping projects to the /projects directory of 
    your linux installation.

    > sudo mkdir /projects
    > cd /projects

    You can download the publicmapping source from the website or use SVN 
    to grab the code
        
      
     a. If you do not have subversion installed use:

		 > sudo apt-get install subversion

        If you have subversion installed, you can export the source if 
        you're not going to update the code with contributions to the 
        open-source project:

       > sudo svn export https://publicmapping.svn.sourceforge.net/svnroot/publicmapping publicmapping

     b. If you want to contribute to the project, do a checkout so you can 
        commit later:

       > sudo svn co https://publicmapping.svn.sourceforge.net/svnroot/publicmapping publicmapping

     c. If you don't have subversion installed, download the project and 
        expand it into /projects/publicmapping
    
 2. Create a "local" directory next to the trunk - this is where your 
    machine-specific settings and data will go:

    > sudo mkdir /projects/publicmapping/local

 3. Copy the settings_sample.ini file to your local settings folder and 
    name it settings.ini

    > sudo cp /projects/publicmapping/trunk/docs/settings_sample.ini \
        /projects/publicmapping/local/settings.ini

 4. a. At this point, make sure that you have postgres and postgis installed.  
    You may need to run the postgis install script if you don't have a 
    postgis template db. Check the postgis site for installation 
    instructions if you're not familiar with postgis:

        http://postgis.refractions.net/docs/ch02.html

   Not that the aptitude install above will not generate templates to generate templates:

   > sudo su postgres 
   > createdb template_postgis
   > createlang plpgsql template_postgis
   > psql -d template_postgis -f /usr/share/postgresql/8.4/contrib/postgis.sql
   > psql -d template_postgis -f /usr/share/postgresql/8.4/contrib/spatial_ref_sys.sql 
   > exit
  

    b.  Once postgis is intalled, run the publicmapping_db.sql script in the 
    sql directory:

    > sudo -u postgres psql -f /projects/publicmapping/trunk/sql/publicmapping_db.sql

 5. This will create a publicmapping db from the template_postgis 
    template, along with a publicmapping user role.  The publicmapping 
    user will be assigned all permissions and ownership on the db.

 6. Check out your settings.ini folder and make sure it's pointing to the
    correct DB and that your DB is accessible. You may want to adjust the 
    value of the map server, too.  Finally, make sure your pg_hba file in 
    your postgres configuration allows password-based authentication on 
    the local machine:

    http://developer.postgresql.org/pgdocs/postgres/auth-pg-hba-conf.html

    You will need a row that looks like this in your pg_hba file:
    
        local   all   all   md5
     
 7. Run the python command in the settings file to generate a secret key 
    for your application and copy it into the settings.ini file.

 8. Run the django syncdb command to create the database:
  
    > cd /projects/publicmapping/trunk/django/publicmapping
    > python ./manage.py syncdb

 9. To import your data, you'll need to configure the import.py command 
    in the "/trunk/publicmapping/django/redistricting/management/commands" 
    directory. 
   
   Unzip the datafile in /projects/publicmapping/trunk/data to the import directory: /projects/local/data/:

    >  mkdir /projects/publicmapping/local/data 
    > (cd  /projects/publicmapping/local/data ; unzip /projects/publicmapping/data/2010_07_15_OHdata.zip )

   OR, Using your favorite text editor, update the shapefile paths 
    and subject configuration to match your data. 

    Then run the import script admin command:

    > python ./manage.py import county tract block
    
    The script may take a long time to run.  It will import the geographic
    data from the shapes and create the links and django models necessary 
    to run the application. 
    
10. Run the demographics admin command to create the spatial views needed 
    by the application. This MUST occur after the data import, as the 
    subjects and geography from the import process are used to construct 
    the views.

    > python ./manage.py demographics

11. Django serves up SLD files to clients, and need this mime type added
    to the system's known mime types in order to serve the content
    properly.

    a. Open the file /etc/mime.types in your favorite editor.
    b. Find the line that starts with "application/xml"
    c. Add " sld" to the end of this line, after "xml xsl xsd"

12. Now that you have the app configured and your data imported, you can 
    run the app using Django's testing server
     
    > python ./manage.py runserver

13. You will see a notice that your server is running and you can access 
    your application at 127.0.0.1:8000  Enter that location into your 
    browser on the local machine and you should be able to use the 
    application.

== Apache Configuration ==

 1. Running the application from the django development server is good for
    setup, but for a production environment, you will want to configure
    Apache.  First, copy the apache file into the "sites-available" 
    Apache config directory (typically /etc/apache2/sites-available/)

    > cp /projects/publicmapping/trunk/django/publicmapping.apache \
        /etc/apache2/sites-available/publicmapping

 2. Enable the new publicmapping site in apache

    > a2ensite publicmapping

 3. If you are NOT running the public mapping project as the default
    web site in Apache, you will have to edit publicmapping.apache to
    reflect your configuration (e.g. VirtualHost directives).

 4. If you ARE running the public mapping project as the default web
    site in Apache, remove the default site configuration:

   > a2dissite default

 5. Make sure you have the following modules for apache enabled: proxy, 
    proxy_http, rewrite, wsgi and ssl
    
   > a2enmod proxy proxy_http rewrite wsgi ssl

 6. You may need to update /etc/apache2/mods-available/proxy.conf  
    If you see:

        Deny from All

    change it to

        Allow from All

 7. This application requires SSL. You will need to generate your
    own publicmapping certficate and key and place them in the /etc/ssl/certs 
    directory with the names publicmapping.crt and publicmapping.key.
    If you have trusted certificates created (or you prefer different names),
    you can edit the location of the files in the publicmapping apache file.

    Generating SSL certificates is beyond the scope of this README.  Check
    the Apache web site for more info:

    http://httpd.apache.org/docs/2.0/ssl/ssl_faq.html

 8. This application runs as the apache user, usually www-data.  Be sure the your
    file permissions allow for the www-data to read the project directories.  Only
    the reports directory needs to be writable by www-data.  No files are required
    to be readable by "all".

      sudo mkdir /projects/publicmapping/local/reports
      sudo chgrp -R www-data /projects/publicmapping/
      sudo chmod -R 750 /projects/publicmapping/
      sudo chmod 770 /projects/publicmapping/local/reports
   

== Geoserver configuration ==
  
 1. To install geoserver, first make sure Tomcat is installed and running
    properly; that means you can get to http://yourComputerName:8080/ and 
    see the "It works" page. You will also need to set up a tomcat user 
    that can manage and administer your site.  You can edit the 
    /var/lib/tomcat6/conf/tomcat-users.xml file to create this user.

 2. Download Geoserver in WAR (Web Archive) format from:
 
        http://geoserver.org/display/GEOS/Stable

 3. Unzip the downloaded zip file so you can access the geoserver.war file.

 4. Open the tomcat manager app and use the Deploy section to deploy 
    Geoserver.
    
        http://yourComputerName:8080/manager/html
    
     a. In the Context Path section, type "/geoserver"
     b. In the WAR or Directory URL section, type the full path to your 
        war file, e.g. "/home/publicmapping/geoserver.war"
     c. Click Deploy. You should see the message "OK - Deployed 
        application at context path /geoserver" near the top of the page.

 5. Now you should be able to go to the geoserver admin page:
 
        http://yourComputerName:8080/geoserver/web 
        
     a. Log in with the default name and password - admin/geoserver.  
     b. Change the administrator name and password in the Security > Users 
        section of the Geoserver menu.

 6. Configure the SLD files for the layers for use in geoserver.  You'll 
    find all of these SLD files in the sld folder:
    
        /projects/publicmapping/trunk/sld
     
     a. Click on the Data > Styles option in the GeoServer menu
     b. Click on "Add a new style" at the top of the screen
     c. Click the "Browse" button, browse to the SLD, then click "Open" 
        in the file dialog.
     d. Click the "Upload" link to upload the style.
     e. Now you'll see the SLD in the document editor Window.  Click the 
        "Submit" button.
     f. Repeat the process for each of the styles in the SLD folder

 7. Now that the styling for each layer is configured, you can add the 
    layers from the database. Click on Data > Layers in the GeoServer menu 
    on the left. Add a new workspace.  The default is "gmu" with a 
    namespace of "http://gmu.azavea.com"  You can use a different 
    workspace if you edit your settings.ini file appropriately.

 8. Add a new store in the workspace you just created. You can do this 
    from the Data > Stores option. This store should point to your local 
    PostGIS server.  Type in the appropriate name and password.

 9. Now add each of the layers in the database.  Click on Data > Layers.  
    For each layer, start by clicking the "Add a new resource" link:
    
     a. For each of the layers, select the appropriate view from the data 
        store you just created. For the demographic layers, you'll need to 
        set the appropriate styling from the "Publishing" tab before you 
        deploy them. Each of the demo layers will have a similarly named 
        SLD from those you just published.
     b. You may need to use the links to generate Bounding Boxes for each 
        layer. Just click the "Compute from data" then "Compute from 
        native bounds" links to do so.  Make sure that you're using the 
        proper SRS (EPSG:3785, aka Web Mercator, for the demo data).
     c. For each geographic level, click on one of the layers already 
        published, and click on "Publish Again". Rename the layer to exclude
        the subject, and select the "_none" style.
     d. In addition to each "demo" layer, you'll need to add the "simple" 
        layers, too.  The styling for these layers in the Publishing 
        section is not important - their styling it will be done by 
        OpenLayers at runtime.

10. Now that your GeoServer is configured, you should use the Services > 
    GWC link in the menu to seed some of your layers.  This will make the 
    base map layers appear faster.

    
== BARD / Reports Configuration ==
 1. The publicmapping project uses the BARD packages, written in the 
    R statistical language, to create customizable reports.  In order to 
    use these features (you can turn them off by changing the ENABLE_REPORTS
    setting in settings.py to "False"), you will need to install BARD and R2HTML
    as the root user so that it's accessible to the django process
    
    > sudo R
    >> install.packages('BARD', dependencies=TRUE)
    >> q("no")

    If you have trouble installing any of these packages, you may need to 
    hunt down and install a dependency or two, depending on your linux 
    distribution.  NB: R packages are installed from source so you'll need
    the build-essential package to install BARD.

  2. By default, reports are served from /projects/publicmapping/local/reports.
     You can make this directory and give it the appropriate permissions with the 
     command:
        
      sudo mkdir /projects/publicmapping/local/reports
      sudo chgrp www-data /projects/publicmapping/local/reports
      sudo chmod 770 /projects/publicmapping/local/reports
    
    
== Data Configuration ==
    Depending on your data, you may want to use the admin interface in 
    the application to edit the display names of your subjects and add
    reasonable "targets" so that the districts are properly displayed.
    
    You can also use the admin interface to determine which subjects
    will be displayed as viewable on the map.  If you make a subject
    visible on the map, be sure to set the target value so that styling
    can be applied to the district values.
    
    You can reach the admin interface by going to http://<yourServerName>/admin
    

== EMail ==
    If you'd like to allow users to retrieve forgotten passwords, make sure you 
    set the MAIL options in the settings.py file, if you are using an extrenal mail server. 

== Documentation ==
    The class documentation is available on any instance at http://hostname/docs/. 
    Documentation is generated by epydoc.  If you make any changes to the documentation
    or code, you can use the epydoc.config file to regenerate the documentation in the
    docs/html folder.

    The database schema image (schema.png) was generated using postgresql autodoc
    and graphviz.
